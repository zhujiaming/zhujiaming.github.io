<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jiaming</title>
  
  <subtitle>这里什么都没有...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhujm.top/"/>
  <updated>2019-08-16T02:00:06.541Z</updated>
  <id>http://zhujm.top/</id>
  
  <author>
    <name>jiaming.zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>🔥欢迎下载体验「小号」应用</title>
    <link href="http://zhujm.top/2019/08/16/201908160914/"/>
    <id>http://zhujm.top/2019/08/16/201908160914/</id>
    <published>2019-08-16T01:14:59.000Z</published>
    <updated>2019-08-16T02:00:06.541Z</updated>
    
    <content type="html"><![CDATA[<h4 id="小号是一款互联网共享短信查看神器-立即下载👇"><a href="#小号是一款互联网共享短信查看神器-立即下载👇" class="headerlink" title="小号是一款互联网共享短信查看神器 立即下载👇"></a>小号是一款互联网共享短信查看神器 <a href="https://www.pgyer.com/wgyt" target="_blank" rel="noopener">立即下载👇</a></h4> <a id="more"></a><p><img src="http://i1.fuimg.com/697160/c9e3d61118df084d.png" alt="xiaohao"></p><p>一款收集展示互联网共享短信的应用，收纳的手机号多达上百个，并且不定期更新增加新的平台手机号。</p><blockquote><p>在日常测试工作中，需要大量的测试账号，而互联网上有此类的共享手机号提供公开的短信共享，这样就能满足大量测试号的需求，但目前此类网站比较分散。</p></blockquote><blockquote><p>因此开发了该app用于收集整合互联网此类平台，并统一在该app上展示，应用架构上支持拓展更多的平台，未来将支持更多的短信或手机号操作。</p></blockquote><h4 id="🍺泼冷水"><a href="#🍺泼冷水" class="headerlink" title="🍺泼冷水"></a>🍺泼冷水</h4><p>1.0版本由于设计简陋功能比较单一，上线应用商店被拒了。（确实很简陋单一，😄，所以目前定位学习交流）</p><p>不过这是个人开发的第一款饱含激情与希望的应用，也算是不忘初心吧，从有想法到出成品经历了四五个月总算挤出来了，出1.0版本了。</p><p>有兴趣的同学可以下载体验下，还是比较实用哦，也欢迎一起学习交流提意见，更欢迎有想法小伙伴一起合作开发😝。</p><h4 id="🍺下面时间"><a href="#🍺下面时间" class="headerlink" title="🍺下面时间"></a>🍺下面时间</h4><p>简单欣赏下由开发者设计的丑陋的界面吧</p><p><img src="http://i1.fuimg.com/697160/264b1fbc59193598.png" alt="ui"></p><h4 id="🍻谢谢阅读！"><a href="#🍻谢谢阅读！" class="headerlink" title="🍻谢谢阅读！"></a>🍻谢谢阅读！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;小号是一款互联网共享短信查看神器-立即下载👇&quot;&gt;&lt;a href=&quot;#小号是一款互联网共享短信查看神器-立即下载👇&quot; class=&quot;headerlink&quot; title=&quot;小号是一款互联网共享短信查看神器 立即下载👇&quot;&gt;&lt;/a&gt;小号是一款互联网共享短信查看神器 &lt;a href=&quot;https://www.pgyer.com/wgyt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;立即下载👇&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="个人项目" scheme="http://zhujm.top/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AndriodStudio打开项目长时间无响应解决</title>
    <link href="http://zhujm.top/2019/06/11/201908151038/"/>
    <id>http://zhujm.top/2019/06/11/201908151038/</id>
    <published>2019-06-11T05:02:58.000Z</published>
    <updated>2019-08-16T01:41:34.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首次安装 AndroidStudio 后，基本都会经历一个漫长的 Gradle 构建工具下载过程，避免这个漫长的等待，那就只有手动下载。</p></blockquote><a id="more"></a><h6 id="手动下载-Gradle-构建工具并设置步骤："><a href="#手动下载-Gradle-构建工具并设置步骤：" class="headerlink" title="手动下载 Gradle 构建工具并设置步骤："></a>手动下载 Gradle 构建工具并设置步骤：</h6><ol><li><p>打开 项目目录/gradle/wrapper/gradle-wrapper.properties</p></li><li><p>查看 distributionUrl 的值的 gradle 版本号（如：gradle-2.4-all.zip），便获得了该项目所需 Gradle 构建工具版本</p></li><li><p><a href="https://pan.baidu.com/s/1pLEkm4F?utm_source=androiddevtools.cn&utm_medium=website#list/path=%2F" target="_blank" rel="noopener">点击这里</a>或<a href="services.gradle.org/distributions/">官方渠道</a><br>选择相应的版本下载，下载速度相比 as 肯定快不少</p></li><li><p>下载完成，打开 user 目录下的一个/.gradle 文件夹(windows 与 mac 相似，都是用户目录下，并且需要设置显示隐藏文件，具体百度即可，如果没有./gradle，运行一遍 AndroidStudio，跑个项目后 kill AndroidStudio 便有了)</p></li><li><p>找到/.gradle/wrapper/dist/ 目录下肯定会有 gradle-x.x-all 的文件夹，且对应项目所需的版本号（没有则把该项目导入 AndroidStudio，然后在 as 下载过程中强制结束 as，即可找到该文件夹）</p></li><li><p>把上面下载好的 jar 包丢进去，重新跑 AndroidStudio，这时，便正常啦。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首次安装 AndroidStudio 后，基本都会经历一个漫长的 Gradle 构建工具下载过程，避免这个漫长的等待，那就只有手动下载。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="devTools" scheme="http://zhujm.top/categories/devTools/"/>
    
    
      <category term="AndroidStudio" scheme="http://zhujm.top/tags/AndroidStudio/"/>
    
      <category term="Gradle" scheme="http://zhujm.top/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>风险投资的过程——《浪潮之巅》</title>
    <link href="http://zhujm.top/2018/08/15/201908151343/"/>
    <id>http://zhujm.top/2018/08/15/201908151343/</id>
    <published>2018-08-15T05:43:16.000Z</published>
    <updated>2019-08-16T01:38:41.192Z</updated>
    
    <content type="html"><![CDATA[<p>风险投资的过程其实就是一个科技公司创办的过程。<a id="more"></a>在美国，一个新兴的科技公司（Startups）的创业过程通常是这样的：来自思科公司的工程师山姆和IBM公司的工程师强尼发明了一种无线通信的技术，当然这种技术和他们所在公司的核心业务无关，两人觉得这种技术很有商业前景，他们就写了个专利草案，又花五千美元找了个专利律师，向美国专利局递交了专利申请（关键之一，知识产权很重要）。两个人下班后以及周末的所有时间全泡在山姆家的车库里用模拟软件 Matlab 进行模拟，证明这种技术可以将无线通信速度提高五十倍（关键之二，是否有数量级的提高是衡量一项新技术是革命性的还是革新性的关键。）两个人想了好几种应用，比如代替现有的计算机 Wifi，或者用到手机上，于是在原有的专利上又添加了两个补充性专利。强尼和山姆于是拿着自己做的 Powerpoint 投影胶片、实验结果和专利申请材料到处找投资者，在碰了七八次壁以后，找到了山姆原来的老板，思科早期雇员亚平。亚平从思科发了财后不再当技术主管了，自己和几个志同道合的有钱人一起在做天使投资人。亚平和不下百十来个创业者谈过投资，对新技术眼光颇为敏锐，发现山姆和强尼的技术很有独到之处，但是因为山姆和强尼讲不清楚这种技术的具体商业前景在哪里，建议他们找一个精通商业的人制定一个商业计划 Business Plan（关键之三，商业计划很重要）。强尼找到做市场和销售的朋友迪克，并向迪克大致介绍了自己的发明，希望迪克加盟共同开发市场。迪克觉得和这两个人谈得来，愿意共同创业。这时出现了第一次股权分配问题。到目前为止，所有的工作都是山姆和强尼做的，两个人各占未来公司的 50% 股权和投票权。迪克加盟后，三个人商定，如果迪克制定出一个商业计划书，他将获得 20% 的股权，山姆和强尼将减持到 40%。迪克经过调查发现，山姆和强尼的发明在高清晰度家庭娱乐中心的前景十分可观，于是制定了可行的商业计划书，并得到了 20% 的股权。三个人到目前为止对今后公司的所有权见下表。三个人再次找到亚平，亚平请他的朋友，斯坦福大学电机工程系的查理曼教授作了评估，证实了山姆等人的技术是先进的并有相当的复杂度，而且有专利保护，别人不易抄袭模仿。亚平觉得可以投资了，他和他的天使投资团觉得山姆、强尼和迪克的工作到目前为止值（未融资前）一百五十万美元，而三个创业者觉得他们的工作值二百五十万，最后商定定价二百万（注：对公司的估价方法有按融资前估价，即 Pre-Money ，和融资后估价，即 Post-Money 两种。从本质上讲，这两种方法是一样的，我们这里的估计都以 Pre-Money 来计算）。亚平和他的投资团投入五十万，占到股份的 20%。同时，亚平提出下列要求：1.亚平要成为董事会成员；2.山姆、强尼和迪克三人必须从原有公司辞职，全职为新公司工作。并且在没有新的投资进来以前，三个人的工资不得高于每月四千美元；3.山姆等三人的股票必须按月在今后的四年里逐步获得（Vested），而不是在公司成立时立即获得。这样如果其中有人离开了，他只能得到一部分股票；4.如果有新的任何融资行为必须通知亚平的天使投资团。现在山姆等人就必须正式成立公司了。为了将来融资和开展业务方便起见，他们在特拉华州注册了赛通科技有限公司。山姆任董事会主席、迪克和亚平任董事。山姆任总裁，强尼任主管技术的副总裁兼首席技术官，迪克任主管市场和营销的副总裁。三个人均为共同创始人。公司注册股票一千五百万股，内部核算价格每股二十美分。在亚平投资后（的那一瞬间），该公司的内部估计已经从两百万增加到二百五十万，以每股二十美分计算，所有股东的股票只占到 1250 万股（250万/0.2=1250万）。那么为什么会多出来 250 万股，它们并没有相应的资金或者技术做抵押，这些股票的存在实际上稀释了（Dilute）所有股东的股权。为什么公司自己要印这些空头钞票呢？因为它们必须留出来给下面的用途：1.由于山姆等人的工资很低，他们将根据自己的贡献，拿到一部分股票作为补偿；2.公司正式成立后需要雇人，需要给员工发股票期权；3.公司还有一些重要的成员没有进来，包括 CEO，他们将获得相当数量的股票。现在，该公司各位股东股权如下：接下来，山姆等人辞去以前的职务，全职创业。公司很成功，半年后做出了产品的原型（Prototype）。但是，50 万投资已经花完了，公司也发展到 20 多人。250 万股票也用去了 150 万股。这时，他们必须再融资。由于该公司前景可观，终于得到了红杉风投的青睐。红杉风投为该公司作价 1500 万美元，这时，该公司的股票每股值 1 美元了，比亚平投资时涨了四倍。红杉同意投资 500 万美元，占 25%，这样总股数增加到 2000 万股。同时，红杉风投将委派一人到该公司董事会任职。山姆等人还答应，由红杉风投帮助寻找一位职业经理人做公司的正式 CEO。双方还商定，融资后再稀释 5%，即 100 万股，为以后的员工发期权。现在该公司股权如下：读者也许已经注意到，红杉风投现在已经成为了最大的股东。两年后，该公司的样品研制成功，并获得东芝公司的订单，同时请到了前博通公司的 COO 比尔出任 CEO。比尔进入了董事会，并以每股三美元的价钱获得 100 万股的期权。当然新来的员工也用去一些未分配的股票。这时该公司的股价其实比红杉风投投资时，已经涨了两倍。比尔到任后，公司进一步发展，但是仍然没有盈利。于是，董事会决定再一次融资，由红杉风投领头协同另两家风投投资一千五百万。公司在投资时作价一亿五百万，即每股五美元。现在，该公司股权变为：这时，投资者的股份已占到 44%，和创始人相对，即拥有了一半左右的控制权。又过了两年，该公司开始盈利，并在高盛的帮助下增发六百万股，在纳斯达克上市，上市时原始股定价每股 25 美元。这样，一个科技公司在 VC 的帮助下便创办成功了。上市后，该公司总市值大约七亿五千万美元。该公司股权如下：这时，创始人山姆等人成了充满传奇色彩的亿万富翁，其员工共持有价值近五千万美元的股票，不少也成了百万富翁。但是，山姆等全体公司员工只持有 44% 的股份，公司的所有权的大部分从创始人和员工手里转移到投资者手中。一般来讲，一个创始人在公司上市时还能握有 10% 的股份已经很不错了。作为最早的投资者，亚平的天使投资团收益最高，高达一百二十四倍。红杉风投的第一轮获利二十四倍，第二轮和其它两家风投均获利四倍。显然，越早投资一个有希望的公司获利越大，当然，失败的可能性也越大。一般大的风投基金都会按一定比例投入到不同发展阶段的公司，这样既保证基本的回报，也保证有得到几十倍回报的机会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;风险投资的过程其实就是一个科技公司创办的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://zhujm.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="Note" scheme="http://zhujm.top/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>A custom clock view .</title>
    <link href="http://zhujm.top/2018/08/15/201908151322/"/>
    <id>http://zhujm.top/2018/08/15/201908151322/</id>
    <published>2018-08-15T05:22:08.000Z</published>
    <updated>2019-08-16T01:39:05.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 自己学习开发的一款基于安卓自定义View实现的机械手表View</p></blockquote><a id="more"></a><p><a href="https://github.com/zhujiaming/CustomClockView" target="_blank" rel="noopener">github传送门</a></p><p><img src="https://img.shields.io/badge/QQ-771407650-green.svg" alt> <img src="https://img.shields.io/badge/email-ah_zjm@163.com-blue.svg" alt></p><p><img src="http://upload-images.jianshu.io/upload_images/1948083-00ebfe8e350ee5dc.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="customclock"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 自己学习开发的一款基于安卓自定义View实现的机械手表View&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人项目" scheme="http://zhujm.top/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>关于Android设备已连接wifi密码的获取密码方式</title>
    <link href="http://zhujm.top/2018/06/15/201908151353/"/>
    <id>http://zhujm.top/2018/06/15/201908151353/</id>
    <published>2018-06-15T05:51:00.000Z</published>
    <updated>2019-08-16T01:38:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android系统本身目前并不支持直接显示当前已连接wifi密码，<a id="more"></a>当Android设备连接wifi成功后，想要和他人分享wifi几乎是不大可能,（当然，我目前了解的如果是小米手机，直接可以通过wifi二维码信息获取到密码），下面记录两种简单的获取普通android设备已连接wifi密码的方式。</p></blockquote><p>大致有两种方式可以获取到当前设备wifi的详细信息,分为root方式与非root方式</p><hr><h5 id="root方式"><a href="#root方式" class="headerlink" title="root方式"></a>root方式</h5><p>安卓手机的ROOT：即为获取最高的权限，就跟电脑获取超级管理员一样的!因为厂家怕你不懂手机系统就设置了这样一个权限。你的手机没ROOT之前，你是以一个使用者的身份在用这个手机。你只能被动的使用里面的一些功能，或者在不影响系统全局的情况下安装一些新的程序。</p><ul><li><p>准备一台已root的android设备<br>通过软件root当前设备，获取管理员最高权限，可通过市面上一些手机root软件来操作，如root大师，360一键root等。</p></li><li><p>查看android设备是否已获取root权限<br>在安卓手机中下载安装<a href="http://shouji.baidu.com/software/10047789.html" target="_blank" rel="noopener">RE文件管理器</a>（该软件在之后也会用到），下载后打开，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/1948083-90dfe95463b0efff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入根目录"></p></li></ul><p>在箭头所指的地方，显示为已挂载为可读写，即为已root状态，当前文件夹下所有文件为可读写。</p><ul><li><p>进入指定文件夹下<br>在根目录下进入 /data/misc/wifi/ 目录下找到文件wpa_supplicant.conf：<br><img src="http://upload-images.jianshu.io/upload_images/1948083-dd192a0722fdcfad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到文件"></p></li><li><p>以文本方式打开该文件<br>打开后内容如图：<br><img src="http://upload-images.jianshu.io/upload_images/1948083-db57cc1a895141cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wpa_supplicant.conf"><br>其中，箭头所指ssid与psk分别为已连接过的wifi的名称与密码了。</p></li></ul><p>当然，在已获取root权限的手机上下载wifi信息查看类的apk软件也是可以查看密码的，如 <a href="http://p.gdown.baidu.com/69779bc851be62657bedfd6f4d7ebcc7e51e57510566c2c0c1068368f911dec32417c03f33a1d061ba02af9e3b225894e66a5e0a9324a271de8c036faf59fc15141cf0cf4368df6124f4762d38c364a81c2ce6c5ae3c168f54d07a0b96969fd0cd16fc87605a0b92a0c7c0d672bc664ca833f9566b72fb857ab8dd9a282c952a9d8f69291650a553bf757097a8fe5d90be654419b5f7ceef7e18099ccd010a0d" target="_blank" rel="noopener">WIFI密码查看器</a>。</p><hr><h5 id="非root方式"><a href="#非root方式" class="headerlink" title="非root方式"></a>非root方式</h5><ul><li>非root方式应用到android系统的备份功能，将wifi信息备份到sd卡的可读写目录中，打开相应文件如类似backup命名的文件夹中的相应文件便可查看密码。但是某些由于国产手机对安卓系统改造太大，部分国产品牌手机未对用户提供备份功能，或者备份数据进行了加密，无法查看，因此，该方法仅适用于部分手机。<br>亲测目前只有少部分手机可采用这样的方式。<br>具体方式<a href="http://jingyan.baidu.com/album/e75aca857b3e60142edac607.html?picindex=3" target="_blank" rel="noopener">百度经验</a>上有介绍。</li><li>万能钥匙方式，该方式估计大多数人都知道，采用了热点连接分享与简单密码暴力破解的方式，热点连接分享估计就是采用万能钥匙自己的app进行wifi连接时，万能钥匙就能获取到wifi信息以及当前地点信息，再备份到网络服务器，分享给当前地点其他人；而暴力破解都知道是用数据字典中的数据一个个作为密码登录wifi，直到成功。</li><li>当然，也可以使用小米手机，wifi密码获取起来相对更容易。</li></ul><hr><h6 id="更多方式希望有大神能补充补充。"><a href="#更多方式希望有大神能补充补充。" class="headerlink" title="更多方式希望有大神能补充补充。"></a>更多方式希望有大神能补充补充。</h6><h6 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h6><ul><li>百度文库</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android系统本身目前并不支持直接显示当前已连接wifi密码，&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
      <category term="WiFi" scheme="http://zhujm.top/tags/WiFi/"/>
    
  </entry>
  
  <entry>
    <title>mac 上AndroidStudio命令行gradlew执行出错</title>
    <link href="http://zhujm.top/2018/06/15/201908151319/"/>
    <id>http://zhujm.top/2018/06/15/201908151319/</id>
    <published>2018-06-15T05:19:22.000Z</published>
    <updated>2019-08-15T05:57:03.312Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>使用mac打包命令 ./gradlew assembleRelease 时，出现：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: bash\r: No such file or directory</span><br></pre></td></tr></table></figure><p>的错误，原因可能是gradlew 文件中含有非法字符了</p><p>解决方法：</p><p>用mac的AndroidStudio 重新创建一个安卓项目，将其中的gradlew文件复制到该出错的项目更目录替换原来的gradlew，再次运行即可正常执行。</p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>执行gradlew命令是出现 Promission Denide问题，没有权限执行的问题</p><p>解决方法：</p><p>执行 chmod +x gradlew</p><p>即可解决该问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h4&gt;&lt;p&gt;使用mac打包命令 ./gradlew assembleRelease 时，出现：&lt;/p&gt;
    
    </summary>
    
      <category term="问题与解决" scheme="http://zhujm.top/categories/%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="AndroidStudio" scheme="http://zhujm.top/tags/AndroidStudio/"/>
    
      <category term="Gradle" scheme="http://zhujm.top/tags/Gradle/"/>
    
      <category term="Mac" scheme="http://zhujm.top/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>关于React-Native中的StaticRenderer组件</title>
    <link href="http://zhujm.top/2018/06/15/201908151313/"/>
    <id>http://zhujm.top/2018/06/15/201908151313/</id>
    <published>2018-06-15T05:13:58.000Z</published>
    <updated>2019-08-16T01:40:21.154Z</updated>
    
    <content type="html"><![CDATA[<p>ReactNative中内置了StaticRender组件，主要用在了listview与viewpager等组件的item中，对复用性及性能有一定的提升。</p><blockquote><p>../app/node_modules/react-native/Libraries/Components/StaticRenderer.js</p></blockquote><a id="more"></a><p>源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PropTypes = <span class="built_in">require</span>(<span class="string">'prop-types'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticRenderer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    shouldUpdate: boolean,</span><br><span class="line">    render: <span class="built_in">Function</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    shouldUpdate: PropTypes.bool.isRequired,</span><br><span class="line">    render: PropTypes.func.isRequired,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps: &#123; <span class="attr">shouldUpdate</span>: boolean &#125;): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> nextProps.shouldUpdate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(): React.Element&lt;any&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.render();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = StaticRenderer;</span><br></pre></td></tr></table></figure><p>很简短的源码。<br>StaticRenderer渲染效果完全由props的render函数来决定，并且根据shouldComponentUpdate回调函数的返回值也就是props.shouldUpdate，来决定了是否会re-render包裹的组件，如果将shouldUpdate设置为false，则就不能通过父组件改变子组件的props触发子组件re-render了，组件的页面状态完全由初始的props来决定，形成一种静态页面。</p><p>所以在ListView中我们的所有item的Component的都是props所决定的一次性的结果，不能进行re-render。如果要进行re-render，就只有改变dataSource触发ListView组件re-render。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReactNative中内置了StaticRender组件，主要用在了listview与viewpager等组件的item中，对复用性及性能有一定的提升。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;../app/node_modules/react-native/Libraries/Components/StaticRenderer.js&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zhujm.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ReactNative" scheme="http://zhujm.top/tags/ReactNative/"/>
    
      <category term="性能优化" scheme="http://zhujm.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>简单破解一款安卓软件</title>
    <link href="http://zhujm.top/2018/03/22/201908151029/"/>
    <id>http://zhujm.top/2018/03/22/201908151029/</id>
    <published>2018-03-22T03:32:08.000Z</published>
    <updated>2019-08-16T01:39:05.638Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载apktool工具"><a href="#下载apktool工具" class="headerlink" title="下载apktool工具"></a>下载apktool工具</h5><p>从官方渠道下载→<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">官方下载</a></p><a id="more"></a><ul><li>简单的命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d test.apk</span><br><span class="line">I: Using Apktool 2.3.4 on test.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: 1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values */* XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br><span class="line">$ apktool b test</span><br><span class="line">I: Using Apktool 2.3.4 on test</span><br><span class="line">I: Checking whether sources has changed...</span><br><span class="line">I: Smaling smali folder into classes.dex...</span><br><span class="line">I: Checking whether resources has changed...</span><br><span class="line">I: Building resources...</span><br><span class="line">I: Building apk file...</span><br><span class="line">I: Copying unknown files/dir...</span><br></pre></td></tr></table></figure></li></ul><p>主要用到这两个命令。</p><h5 id="应用市场摘取一枚apk"><a href="#应用市场摘取一枚apk" class="headerlink" title="应用市场摘取一枚apk"></a>应用市场摘取一枚apk</h5><p>此处简单以youdaonote.apk为例</p><ul><li><p>执行完毕apktool d xxx.apk后，会在同级目录下生成一个文件夹<br><img src="https://upload-images.jianshu.io/upload_images/1948083-8923d61960b7e5e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译后"></p></li><li><p>在IntelliJ IDEA中打开<br><img src="https://upload-images.jianshu.io/upload_images/1948083-dc826fe2be61d84f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="in idea"></p></li><li><p>尝试破解-非vip可使用壁纸<br>（在该应用中，非vip是无法使用特定壁纸）<br><img src="https://upload-images.jianshu.io/upload_images/1948083-65afc3d243369282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="image.png"><br>此处需要了解简单的smali语法<br>参考：<a href="https://www.cnblogs.com/sevck/p/6844513.html" target="_blank" rel="noopener">https://www.cnblogs.com/sevck/p/6844513.html</a><br>之后就是可以全局查找，浏览等等手段，定位到关键代码位置，修改smali代码，再通过上面的命令来完成重新打包，再签名，即得一枚破解包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- apktool b test</span><br></pre></td></tr></table></figure></li></ul><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>这里只是简单的记录下破解手段，因为自家app也被破解了，必须得知己知彼。<br>破解软件不安全，用不得，此处仅供学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 反编译</span><br><span class="line">apktool d app-release.apk -o outdir </span><br><span class="line"></span><br><span class="line"># 回编译（生成的apk默认放在outdir/dist目录中）</span><br><span class="line">apktool b outdir</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载apktool工具&quot;&gt;&lt;a href=&quot;#下载apktool工具&quot; class=&quot;headerlink&quot; title=&quot;下载apktool工具&quot;&gt;&lt;/a&gt;下载apktool工具&lt;/h5&gt;&lt;p&gt;从官方渠道下载→&lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方下载&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zhujm.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
      <category term="逆向" scheme="http://zhujm.top/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>浅析React-Native WebView,实现RN代码与Html的简单交互</title>
    <link href="http://zhujm.top/2017/12/06/201908151301/"/>
    <id>http://zhujm.top/2017/12/06/201908151301/</id>
    <published>2017-12-06T05:01:58.000Z</published>
    <updated>2019-08-16T01:39:05.640Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>基于React-Native0.41及0.25两个版本来分析</p></blockquote><a id="more"></a><blockquote><p>公司项目基于ReactNative开发，最近有个需求为嵌入Web页面至应用中，分析需求发现技术实现中涉及了Web页面与app代码之间的交互，这对于原生来说实现并不难，但对于接触不久的RN来说，实现起来有点难度。下面结合React-Native WebView API来分析WebView的使用及简单的交互。</p></blockquote><h6 id="以下内容包括："><a href="#以下内容包括：" class="headerlink" title="以下内容包括："></a>以下内容包括：</h6><ul><li>React-Native WebView API 属性介绍</li><li>webview 实现与RN代码简单交互</li><li>在Android原生代码中对ReactNative WebView控件进行初始设置</li></ul><h4 id="React-Native-WebView"><a href="#React-Native-WebView" class="headerlink" title="React-Native WebView"></a>React-Native WebView</h4><p>首先结合React-Native 高版本与低版本（0.41.2 与 0.25.1）分析其RN源码（偏向于Android方向）及api</p><h4 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h4><p>WebView 作为一个RN组件也是有其生命周期方法，翻开源码，查看其render方法，其return返回值如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">   &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">     &#123;webView&#125;</span><br><span class="line">     &#123;otherView&#125;</span><br><span class="line">   &lt;/View&gt;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p>从此处可以看出，WebView只是一层壳，其包括了两层覆盖的View，其中{webView}为RCTWebView组件，映射原生RCTWebView组件，是真正加载web页面的组件，{otherView}分析其构造可以发现它主要用来渲染加载失败视图及加载中的提示视图。</p><h5 id="webView"><a href="#webView" class="headerlink" title="{webView}"></a>{webView}</h5><p>render中定义webView变量的代码如下(高版本低版本部分属性有所出入)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var webView =</span><br><span class="line">  &lt;RCTWebView</span><br><span class="line">    ref=&#123;RCT_WEBVIEW_REF&#125;</span><br><span class="line">    key=&quot;webViewKey&quot;</span><br><span class="line">    style=&#123;webViewStyles&#125;</span><br><span class="line">    source=&#123;resolveAssetSource(source)&#125;</span><br><span class="line">    scalesPageToFit=&#123;this.props.scalesPageToFit&#125;</span><br><span class="line">    injectedJavaScript=&#123;this.props.injectedJavaScript&#125;</span><br><span class="line">    userAgent=&#123;this.props.userAgent&#125;</span><br><span class="line">    javaScriptEnabled=&#123;this.props.javaScriptEnabled&#125;</span><br><span class="line">    domStorageEnabled=&#123;this.props.domStorageEnabled&#125;</span><br><span class="line">    messagingEnabled=&#123;typeof this.props.onMessage === &apos;function&apos;&#125;</span><br><span class="line">    onMessage=&#123;this.onMessage&#125;</span><br><span class="line">    contentInset=&#123;this.props.contentInset&#125;</span><br><span class="line">    automaticallyAdjustContentInsets=&#123;this.props.automaticallyAdjustContentInsets&#125;</span><br><span class="line">    onContentSizeChange=&#123;this.props.onContentSizeChange&#125;</span><br><span class="line">    onLoadingStart=&#123;this.onLoadingStart&#125;</span><br><span class="line">    onLoadingFinish=&#123;this.onLoadingFinish&#125;</span><br><span class="line">    onLoadingError=&#123;this.onLoadingError&#125;</span><br><span class="line">    testID=&#123;this.props.testID&#125;</span><br><span class="line">    mediaPlaybackRequiresUserAction=&#123;this.props.mediaPlaybackRequiresUserAction&#125;</span><br><span class="line">    allowUniversalAccessFromFileURLs=&#123;this.props.allowUniversalAccessFromFileURLs&#125;</span><br><span class="line">  /&gt;;</span><br></pre></td></tr></table></figure><p><rctwebview> 所设置的属性在webView Api几乎都有介绍，但部分属性却没有说明，大概分析下：</rctwebview></p><ul><li>scalesPageToFit bool </li></ul><p>其对应Android端桥接方法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ReactProp(name = &quot;scalesPageToFit&quot;)</span><br><span class="line"> public void setScalesPageToFit(WebView view, boolean enabled) &#123;</span><br><span class="line">   view.getSettings().setUseWideViewPort(!enabled);//android原生WebView设置此属性,可任意比例缩放</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>由此可知，设置是否要把网页缩放到适应视图的大小，以及是否允许用户改变缩放比例。RN实现中其值默认设置为true。</p><ul><li>injectedJavaScript</li></ul><p>设置在网页加载之前注入的一段JS代码。</p><ul><li>userAgent</li></ul><p>其对应Android端桥接方法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ReactProp(name = &quot;userAgent&quot;)</span><br><span class="line">public void setUserAgent(WebView view, @Nullable String userAgent) &#123;</span><br><span class="line">  if (userAgent != null) &#123;</span><br><span class="line">    // TODO(8496850): Fix incorrect behavior when property is unset (uA == null)</span><br><span class="line">    view.getSettings().setUserAgentString(userAgent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RN源码注释：</p><blockquote><p>Sets the user-agent for this WebView. The user-agent can also be set in native using WebViewConfig. This prop will overwrite that config.</p></blockquote><p>综合上面信息，可知该属性为设置浏览器标识，也可通过原生接口WebViewConfig实现定制WebView,下面会稍作详细介绍如何使用WebViewConfig。</p><ul><li>domStorageEnabled</li></ul><p>其对应Android端桥接方法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ReactProp(name = &quot;domStorageEnabled&quot;)</span><br><span class="line">public void setDomStorageEnabled(WebView view, boolean enabled) &#123;</span><br><span class="line">  view.getSettings().setDomStorageEnabled(enabled);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性定义指定是否开启DOM本地存储。（仅限Android平台），具体可参考：<br><a href="http://blog.csdn.net/a345017062/article/details/8703221" target="_blank" rel="noopener">http://blog.csdn.net/a345017062/article/details/8703221</a></p><ul><li>messagingEnabled bool</li><li>onMessage</li></ul><p>这两个属性支持高版本ReactNative Api 低版本无此属性。<br>messagingEnabled参数控制onMessage函数是否有效，如果不主动设置，则该值为onMessage函数是否定义的结果为值。</p><p>onMessage为function类型，官方api解释为:</p><blockquote><p>在webview内部的网页中调用window.postMessage方法时可以触发此属性对应的函数，从而实现网页和RN之间的数据交换。 设置此属性的同时会在webview中注入一个postMessage的全局函数并覆盖可能已经存在的同名实现。网页端的window.postMessage只发送一个参数data，此参数封装在RN端的event对象中，即event.nativeEvent.data。data 只能是一个字符串。</p></blockquote><p>Android原生中实现为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  @ReactProp(name = &quot;messagingEnabled&quot;)</span><br><span class="line">  public void setMessagingEnabled(WebView view, boolean enabled) &#123;</span><br><span class="line">    ((ReactWebView) view).setMessagingEnabled(enabled);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">public void setMessagingEnabled(boolean enabled) &#123;</span><br><span class="line">  if (messagingEnabled == enabled) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  messagingEnabled = enabled;</span><br><span class="line">  if (enabled) &#123;</span><br><span class="line">    addJavascriptInterface(new ReactWebViewBridge(this), BRIDGE_NAME);</span><br><span class="line">    linkBridge();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    removeJavascriptInterface(BRIDGE_NAME);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void linkBridge() &#123;</span><br><span class="line">  if (messagingEnabled) &#123;</span><br><span class="line">    if (ReactBuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">      // See isNative in lodash</span><br><span class="line">      String testPostMessageNative = &quot;String(window.postMessage) === String(Object.hasOwnProperty).replace(&apos;hasOwnProperty&apos;, &apos;postMessage&apos;)&quot;;</span><br><span class="line">      evaluateJavascript(testPostMessageNative, new ValueCallback&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceiveValue(String value) &#123;</span><br><span class="line">          if (value.equals(&quot;true&quot;)) &#123;</span><br><span class="line">            FLog.w(ReactConstants.TAG, &quot;Setting onMessage on a WebView overrides existing values of window.postMessage, but a previous value was defined&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadUrl(&quot;javascript:(&quot; +</span><br><span class="line">      &quot;window.originalPostMessage = window.postMessage,&quot; +</span><br><span class="line">      &quot;window.postMessage = function(data) &#123;&quot; +</span><br><span class="line">        BRIDGE_NAME + &quot;.postMessage(String(data));&quot; +</span><br><span class="line">      &quot;&#125;&quot; +</span><br><span class="line">    &quot;)&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生中实现是调用webView的loadUrl()，执行一段js代码，实现代码的注入。</p><p>定义该函数，即可实现网页端与RN代码之间的数据交互，下面详细介绍。</p><ul><li>onContentSizeChange func</li></ul><p>该函数在Rn api上并未提及，且在低版本rn上并没有<br>其对应Android端桥接方法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ReactProp(name = &quot;onContentSizeChange&quot;)</span><br><span class="line">public void setOnContentSizeChange(WebView view, boolean sendContentSizeChangeEvents) &#123;</span><br><span class="line">  if (sendContentSizeChangeEvents) &#123;</span><br><span class="line">    view.setPictureListener(getPictureListener());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    view.setPictureListener(null);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合Android Api可知，该函数用途为定义网页中图片加载完毕的状态回调。<br>这个方法已经被Android标为弃用,这个对应的picture并不包含复合层或可以滚动的Div,只能被使用来侦测WebView内容的变化.在以后的版本会提供他的替代事件,所以该属性可不用。</p><p>其他属性可参看RN源码解释与官方Api。</p><h5 id="otherView"><a href="#otherView" class="headerlink" title="{otherView}"></a>{otherView}</h5><p>在render中，otherView是这么赋值的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> var otherView = null;</span><br><span class="line"></span><br><span class="line">if (this.state.viewState === WebViewState.LOADING) &#123;</span><br><span class="line">   otherView = (this.props.renderLoading || defaultRenderLoading)();</span><br><span class="line"> &#125; else if (this.state.viewState === WebViewState.ERROR) &#123;</span><br><span class="line">   var errorEvent = this.state.lastErrorEvent;</span><br><span class="line">   otherView = this.props.renderError &amp;&amp; this.props.renderError(</span><br><span class="line">     errorEvent.domain,</span><br><span class="line">     errorEvent.code,</span><br><span class="line">     errorEvent.description);</span><br><span class="line"> &#125; else if (this.state.viewState !== WebViewState.IDLE) &#123;</span><br><span class="line">   console.error(&apos;RCTWebView invalid state encountered: &apos; + this.state.loading);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可直观看出，otherView根据WebView不同状态绘制提示页的。</p><ul><li>renderLoading func</li></ul><p>绘制加载中提示页</p><ul><li>renderError func</li></ul><p>绘制加载错误提示页</p><h5 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h5><ul><li>onNavigationStateChange func</li></ul><p>源码注释如下:</p><blockquote><p> We return an event with a bunch of fields including:<br>   url, title, loading, canGoBack, canGoForward</p></blockquote><p>具体为重写该函数可在webView状态发生改变的时候回调webView的event信息,event信息里包含了url, title, loading, canGoBack, canGoForward.</p><ul><li>startInLoadingState bool</li></ul><p>源码中的注释：</p><blockquote><p>force WebView to show loadingView on first load</p></blockquote><p>具体为设置第一次加载数据时是否显示loading状态视图，默认值为true.</p><h4 id="webview-实现与RN代码简单交互"><a href="#webview-实现与RN代码简单交互" class="headerlink" title="webview 实现与RN代码简单交互"></a>webview 实现与RN代码简单交互</h4><p>不管安卓还是ios App,当内嵌webView加载网页时，多少都会有涉及网页端代码与原生代码之间的交互。</p><p>比如对原生代码返回键的监听，来实现对当网页可返回时点击app返回键不关闭网页，而是打开前一个网页，当没有前一个网页时，关闭当前webView页面，返回App上个页面。</p><p>这里涉及了app端与原生代码之间的简单交互,下面来说说我是怎么简单在高版本，低版本上实现的。</p><h6 id="使用高低版本都有的属性方法–onNavigationStateChange"><a href="#使用高低版本都有的属性方法–onNavigationStateChange" class="headerlink" title="使用高低版本都有的属性方法–onNavigationStateChange"></a>使用高低版本都有的属性方法–onNavigationStateChange</h6><p>这个函数上面介绍过，重写该回调时会传入一个event参数，event封装了url, title, loading, canGoBack, canGoForward五个方法。且每次webView状态改变时会回调该函数，很简单，通过url来判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNavigationStateChange=&#123;<span class="keyword">this</span>.onNavigationStateChange&#125;<span class="comment">//在WebView中注册该回调方法</span></span><br><span class="line"></span><br><span class="line">onNavigationStateChange(event)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'onNavigationStateChange:'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(event); <span class="comment">//打印出event中属性</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>event的打印结果如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1948083-2fb41e3502b87af3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="event对象属性"></p><p>这里便可直观的获取到WebView的重要状态属性，url为点击html<a>标签触发的超链接，这里自定义成app能判断的协议链接，即可实现简单交互，举例点击网页按钮退出webView，即可用该方法实现。<br>其他值如canGoBack,canGoForword,title，见名之意。<br>但有个属性target有些疑惑，咱打开android源码看看：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> WritableMap <span class="title">createWebViewEvent</span><span class="params">(WebView webView, String url)</span> </span>&#123;</span><br><span class="line">  WritableMap event = Arguments.createMap();</span><br><span class="line">  event.putDouble(<span class="string">"target"</span>, webView.getId());</span><br><span class="line">  <span class="comment">// Don't use webView.getUrl() here, the URL isn't updated to the new value yet in callbacks</span></span><br><span class="line">  <span class="comment">// like onPageFinished</span></span><br><span class="line">  event.putString(<span class="string">"url"</span>, url);</span><br><span class="line">  event.putBoolean(<span class="string">"loading"</span>, !mLastLoadFailed &amp;&amp; webView.getProgress() != <span class="number">100</span>);</span><br><span class="line">  event.putString(<span class="string">"title"</span>, webView.getTitle());</span><br><span class="line">  event.putBoolean(<span class="string">"canGoBack"</span>, webView.canGoBack());</span><br><span class="line">  event.putBoolean(<span class="string">"canGoForward"</span>, webView.canGoForward());</span><br><span class="line">  <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>target也就是原生WebView的getId()返回值，也就是android中布局文件里的id值，这里算是唯一标识吧应该。</p><h6 id="使用高版本的属性方法–onMessage-event"><a href="#使用高版本的属性方法–onMessage-event" class="headerlink" title="使用高版本的属性方法–onMessage(event)"></a>使用高版本的属性方法–onMessage(event)</h6><p>这个函数在RN官方API中有介绍，专门用来进行网页端与RN端的通信，这里来实现下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onMessage=&#123;<span class="keyword">this</span>.onMessage&#125;</span><br><span class="line">  onMessage(event)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'onMessage-&gt;event.nativeEvent.data:'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(event.nativeEvent.data);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在html代码中通过点击方式发送data:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn_msg1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.postMessage(<span class="string">'网页端点击了按钮啦。。。'</span>)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/1948083-b60f3c9be5dc4eb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="onMessage"></p><h6 id="WebView-Javascript-Bridge"><a href="#WebView-Javascript-Bridge" class="headerlink" title="WebView Javascript Bridge"></a>WebView Javascript Bridge</h6><p>该三方库兼容低版本实现网页端发送message,并可实现rn向html代码交互。<br>参看：<a href="https://github.com/alinz/react-native-webview-bridge" target="_blank" rel="noopener">https://github.com/alinz/react-native-webview-bridge</a><br>实现起来，稍微复杂些，安卓IOS端都需引入依赖。<br>其通过注入js的方式，在html中注入 WebViewBridge.onMessage函数，实现了html与RN之间的双向交互，功能强大，具体看其api。</p><h4 id="在Android原生代码中对ReactNative-WebView控件进行初始设置"><a href="#在Android原生代码中对ReactNative-WebView控件进行初始设置" class="headerlink" title="在Android原生代码中对ReactNative WebView控件进行初始设置"></a>在Android原生代码中对ReactNative WebView控件进行初始设置</h4><p>翻开Android端桥接WebView的源码ReactWebViewManager，发现其有两个构造参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReactWebViewManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mWebViewConfig = <span class="keyword">new</span> WebViewConfig() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configWebView</span><span class="params">(WebView webView)</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReactWebViewManager</span><span class="params">(WebViewConfig webViewConfig)</span> </span>&#123;</span><br><span class="line">    mWebViewConfig = webViewConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> WebView <span class="title">createViewInstance</span><span class="params">(ThemedReactContext reactContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    mWebViewConfig.configWebView(webView);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> webView;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>再打开WebViewConfig接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebViewConfig</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">configWebView</span><span class="params">(WebView webView)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就可以看出，其实咱可以传入个WebViewConfig实例,通过webView.getSettings()对WebView进行Setting，下面简单实现下。<br>由于MainReactPackage.java里已经将ReactWebViewManager进行无参实例化，并加入集合通过createViewManagers()返回。所以我觉得可通过继承的方式重写createViewManagers()返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CusMainReactPackage</span> <span class="keyword">extends</span> <span class="title">MainReactPackage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WebViewConfig webViewConfig = <span class="keyword">new</span> WebViewConfig() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configWebView</span><span class="params">(WebView webView)</span> </span>&#123;</span><br><span class="line">            WebSettings settings = webView.getSettings();</span><br><span class="line">            <span class="comment">//do settings...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        List&lt;ViewManager&gt; viewManagers = handleRepleaceRTCWebView(<span class="keyword">super</span>.createViewManagers(reactContext));</span><br><span class="line">        <span class="keyword">return</span> viewManagers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换viewManager中默认的RCTWebViewManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ViewManager&gt; <span class="title">handleRepleaceRTCWebView</span><span class="params">(List&lt;ViewManager&gt; viewManagers)</span> </span>&#123;</span><br><span class="line">        List&lt;ViewManager&gt; _viewManagers = <span class="keyword">new</span> ArrayList&lt;&gt;(viewManagers);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _viewManagers.size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (_viewManagers.get(i).getName().equals(<span class="string">"RCTWebView"</span>)) &#123;</span><br><span class="line">                _viewManagers.set(i, <span class="keyword">new</span> ReactWebViewManager(webViewConfig));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> _viewManagers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后进行相应调用修改即可。</p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>以上都是结合ReactNative Andorid端对WebView组件进行学习研究的总结，由于对RN接触不久，所以肯定有些理解错误的地方，望指正建议，谢谢！</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="http://reactnative.cn/docs/0.42/webview.html" target="_blank" rel="noopener">http://reactnative.cn/docs/0.42/webview.html</a></li><li><a href="http://facebook.github.io/react-native/releases/0.25/docs/webview.html#webview" target="_blank" rel="noopener">http://facebook.github.io/react-native/releases/0.25/docs/webview.html#webview</a></li><li><a href="https://github.com/alinz/react-native-webview-bridge" target="_blank" rel="noopener">https://github.com/alinz/react-native-webview-bridge</a></li><li><a href="http://blog.csdn.net/codetomylaw/article/details/52490378" target="_blank" rel="noopener">http://blog.csdn.net/codetomylaw/article/details/52490378</a></li><li><a href="https://developer.android.com/reference/android/webkit/WebView.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/webkit/WebView.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;基于React-Native0.41及0.25两个版本来分析&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zhujm.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
      <category term="ReactNative" scheme="http://zhujm.top/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>探究WebView getContentHeight的内部实现看看是否需要进行额外计算</title>
    <link href="http://zhujm.top/2017/11/22/201908150947/"/>
    <id>http://zhujm.top/2017/11/22/201908150947/</id>
    <published>2017-11-22T03:32:08.000Z</published>
    <updated>2019-08-16T01:40:45.372Z</updated>
    
    <content type="html"><![CDATA[<p>先从WebView入手</p><h6 id="WebView-java"><a href="#WebView-java" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the height of the HTML content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the height of the HTML content</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"webview"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    <span class="keyword">return</span> mProvider.getContentHeight();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>再找mProvider的实现</p><h6 id="WebView-java-1"><a href="#WebView-java-1" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void ensureProviderCreated() &#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    if (mProvider == null) &#123;</span><br><span class="line">        // As this can get called during the base class constructor chain, pass the minimum</span><br><span class="line">        // number of dependencies here; the rest are deferred to init().</span><br><span class="line">        mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getFactory()是关键</p><h6 id="WebView-java-2"><a href="#WebView-java-2" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static WebViewFactoryProvider getFactory() &#123;</span><br><span class="line">    return WebViewFactory.getProvider();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看WebViewFactory.getProvider(),直接看return</p><h6 id="WebViewFactory-java"><a href="#WebViewFactory-java" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static WebViewFactoryProvider getProvider() &#123;</span><br><span class="line">    //...</span><br><span class="line">    if (sProviderInstance != null) return sProviderInstance;</span><br><span class="line">    //...</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class="line">        Method staticFactory = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            staticFactory = providerClass.getMethod(</span><br><span class="line">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">               if (DEBUG) &#123;</span><br><span class="line">                Log.w(LOGTAG, &quot;error instantiating provider with static factory method&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">    //...</span><br><span class="line">     try &#123;</span><br><span class="line">        sProviderInstance = (WebViewFactoryProvider)</span><br><span class="line">                            staticFactory.invoke(null, new WebViewDelegate());</span><br><span class="line">        if (DEBUG) Log.v(LOGTAG, &quot;Loaded provider: &quot; + sProviderInstance);</span><br><span class="line">        return sProviderInstance;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">    </span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到了反射，关键的getProviderClass()，也是直接看return</p><h6 id="WebViewFactory-java-1"><a href="#WebViewFactory-java-1" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static Class&lt;WebViewFactoryProvider&gt; getProviderClass() &#123;</span><br><span class="line">        //...</span><br><span class="line">    try &#123;</span><br><span class="line">                return getWebViewProviderClass(clazzLoader);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_WEBVIEW);</span><br><span class="line">                &#125;</span><br><span class="line">        //...</span><br><span class="line">                </span><br><span class="line">     try &#123;</span><br><span class="line">                return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(NULL_WEBVIEW_FACTORY);</span><br><span class="line">            &#125; catch (ClassNotFoundException e2) &#123;</span><br><span class="line">                // Ignore.</span><br><span class="line">            &#125;</span><br><span class="line">       //...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个return可以不用关心，因为有null,关注第一个return</p><h6 id="WebViewFactory-java-2"><a href="#WebViewFactory-java-2" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @hide</span><br><span class="line"> */</span><br><span class="line">public static Class&lt;WebViewFactoryProvider&gt; getWebViewProviderClass(ClassLoader clazzLoader)</span><br><span class="line">        throws ClassNotFoundException &#123;</span><br><span class="line">    return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(CHROMIUM_WEBVIEW_FACTORY,</span><br><span class="line">            true, clazzLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隐藏方法，看看CHROMIUM_WEBVIEW_FACTORY是什么东东</p><h6 id="WebViewFactory-java-3"><a href="#WebViewFactory-java-3" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/** @hide */</span><br><span class="line">private static final String CHROMIUM_WEBVIEW_FACTORY =</span><br><span class="line">        &quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForO&quot;;</span><br></pre></td></tr></table></figure><p>OK,反射了这个类，去sdk source里找找</p><p>…<br>找啊找<br>…<br>发现在android-19,android-20,android-22里找到，高版本的都是null实现</p><p>随便找个android-22吧，路径如下：</p><blockquote><p>android-sdk\sources\android-22\com\android\webview\chromium\WebViewChromiumFactoryProvider.java</p></blockquote><p>回到上面<br>getProviderClass()完毕，反射出WebViewChromiumFactoryProvider实例，就可以执行其createWebView()方法了</p><h6 id="WebViewChromiumFactoryProvider-java"><a href="#WebViewChromiumFactoryProvider-java" class="headerlink" title="WebViewChromiumFactoryProvider.java"></a>WebViewChromiumFactoryProvider.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) &#123;</span><br><span class="line">    WebViewChromium wvc = new WebViewChromium(this, webView, privateAccess);</span><br><span class="line"></span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        if (mWebViewsToStart != null) &#123;</span><br><span class="line">            mWebViewsToStart.add(new WeakReference&lt;WebViewChromium&gt;(wvc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return wvc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK 真正的实现找到了—&gt;WebViewChromium.java，并且在同目录下</p><p>至此，WebView的傀儡 WebViewProvider mProvider已揭开真面目</p><p>下一步肯定是不忘初心，看看getContentHeight()的实现啦</p><h6 id="WebViewChromiumFactoryProvider-java-1"><a href="#WebViewChromiumFactoryProvider-java-1" class="headerlink" title="WebViewChromiumFactoryProvider.java"></a>WebViewChromiumFactoryProvider.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int getContentHeight() &#123;</span><br><span class="line">    if (mAwContents == null) return 0;</span><br><span class="line">    // No checkThread() as it is mostly thread safe (workaround for b/10594869).</span><br><span class="line">    return mAwContents.getContentHeightCss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是桥接其他类来实现，AwContents.java，在 org.chromium.android_webview.AwContents;</p><blockquote><p>AwContents提供的不是WebView的API，所以，需要一层桥接部分，将AwContents桥接到WebView，这就是图中的桥接模块，该模块位于Android源代码中的frameworks/webview/chromium/java/com/android/webview/chromium/目录下，WebViewChromium和WebViewChromiumFactory类作为WebView的具体实现，依赖于Chromium项目的AwContents模块。</p></blockquote><p>github clone 一个Chromium项目看看<br><a href="https://android.googlesource.com/platform/external/chromium_org" target="_blank" rel="noopener">https://android.googlesource.com/platform/external/chromium_org</a></p><p>找啊找<br>在\chromium_org\android_webview\java\src\org\chromium\android_webview目录下找到AwContents.java</p><p>ok 查看其内部实现即可</p><h6 id="AwContents-java"><a href="#AwContents-java" class="headerlink" title="AwContents.java"></a>AwContents.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int getContentHeightCss() &#123;</span><br><span class="line">    return (int) Math.ceil(mContentHeightDip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出直接返回成员变量，未进行计算</p><p>那这个成员变量赋值在哪</p><h6 id="AwContents-java-1"><a href="#AwContents-java-1" class="headerlink" title="AwContents.java"></a>AwContents.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@CalledByNative</span><br><span class="line">private void updateScrollState(int maxContainerViewScrollOffsetX,</span><br><span class="line">        int maxContainerViewScrollOffsetY, int contentWidthDip, int contentHeightDip,</span><br><span class="line">        float pageScaleFactor, float minPageScaleFactor, float maxPageScaleFactor) &#123;</span><br><span class="line">    mContentWidthDip = contentWidthDip;</span><br><span class="line">    mContentHeightDip = contentHeightDip;</span><br><span class="line">    mScrollOffsetManager.setMaxScrollOffset(maxContainerViewScrollOffsetX,</span><br><span class="line">            maxContainerViewScrollOffsetY);</span><br><span class="line">    setPageScaleFactorAndLimits(pageScaleFactor, minPageScaleFactor, maxPageScaleFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里赋值，可以根据注解@CalledByNative看出是Native层主动回调出来进行设置。</p><p>（也可在该实现中查看其它webview操作的实现。）</p><p>所以得到了想要的答案。</p><blockquote><p>参考：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1921.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1921.html</a></p><p><a href="https://android.googlesource.com/platform/external/chromium_org" target="_blank" rel="noopener">https://android.googlesource.com/platform/external/chromium_org</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从WebView入手&lt;/p&gt;
&lt;h6 id=&quot;WebView-java&quot;&gt;&lt;a href=&quot;#WebView-java&quot; class=&quot;headerlink&quot; title=&quot;WebView.java&quot;&gt;&lt;/a&gt;WebView.java&lt;/h6&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Gets the height of the HTML content.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the height of the HTML content&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ViewDebug&lt;/span&gt;.ExportedProperty(category = &lt;span class=&quot;string&quot;&gt;&quot;webview&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getContentHeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mProvider.getContentHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zhujm.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
      <category term="WebView" scheme="http://zhujm.top/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>JS箭头函数与传统JavaScript函数使用</title>
    <link href="http://zhujm.top/2017/09/11/201908151303/"/>
    <id>http://zhujm.top/2017/09/11/201908151303/</id>
    <published>2017-09-11T05:01:58.000Z</published>
    <updated>2019-08-15T05:07:41.791Z</updated>
    
    <content type="html"><![CDATA[<h5 id="箭头函数的特性："><a href="#箭头函数的特性：" class="headerlink" title="箭头函数的特性："></a>箭头函数的特性：</h5><ul><li>对this的关联。箭头函数内置的this的值，取决于箭头函数在哪定义，而非箭头函数执行的上下文环境。</li><li>new不可用。箭头函数内不能使用new关键字来实例化对象，否则报错。</li><li>没有arguments对象。不能通过arguments对象访问传入参数，只能使用显式命名或其他ES6新特性来完成。</li><li>this不可变。函数内置的this不可变，在函数体内整个执行环境中未常量。</li></ul><p>有这些这些差异的原因：对this的绑定是JavaScript错误的常见来源之一。容易丢失函数内置数值，或得出意外结果。其次，将箭头函数限制为使用固定this引用，有利于JavaScript引擎优化处理。</p><a id="more"></a><h5 id="常见使用："><a href="#常见使用：" class="headerlink" title="常见使用："></a>常见使用：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数返回单个值（当入参是一个不需要加（））</span></span><br><span class="line"><span class="keyword">var</span> getItem=<span class="function"><span class="params">key</span>=&gt;</span>value;</span><br><span class="line"><span class="comment">//返回运算表达式结果</span></span><br><span class="line"><span class="keyword">var</span> sum=<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>n1+n2;</span><br><span class="line"><span class="comment">//返回运算表达式结果</span></span><br><span class="line"><span class="keyword">var</span> sum2=<span class="function"><span class="params">()</span>=&gt;</span><span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//大括号函数体</span></span><br><span class="line"><span class="keyword">var</span> sum3=<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>&#123;<span class="keyword">return</span> n1+n2;&#125;</span><br><span class="line"><span class="comment">//箭头函数返回对象</span></span><br><span class="line"><span class="keyword">var</span> getItem2=<span class="function"><span class="params">key</span>=&gt;</span>(&#123;</span><br><span class="line">    id:key,</span><br><span class="line">    name:<span class="string">'jm'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="使用普通的function声明函数："><a href="#使用普通的function声明函数：" class="headerlink" title="使用普通的function声明函数："></a>使用普通的function声明函数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = &#123;</span><br><span class="line">   id=<span class="string">'123'</span> ,</span><br><span class="line">   init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.doSomething(event.type); <span class="comment">// error</span></span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   doSomething:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">"Handling "</span> + type + <span class="string">" for "</span> + <span class="keyword">this</span>.id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，因为函数内部this关联问题，this会根据当前函数执行环境去取值，所以this.doSomething(event.type); 这里的this会指向全局对象，全局对象没有doSomething方法，就undefinde了。</p><p>解决：<br>这里在函数中使用bind()将this与Comp明确关联起来，相当于又创建一个已关联现有this的新函数，即可解决问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = &#123;</span><br><span class="line">   id=<span class="string">'123'</span> ,</span><br><span class="line">   init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, （<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.doSomething(event.type); <span class="comment">// error</span></span><br><span class="line">        &#125;）.bind(<span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   doSomething:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">"Handling "</span> + type + <span class="string">" for "</span> + <span class="keyword">this</span>.id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，由于前面所述箭头函数内置的this的值，取决于箭头函数在哪定义，而非箭头函数执行的上下文环境。<br>这里将function声明的函数替换为箭头函数，即可直接使用this.doSomething()了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = &#123;</span><br><span class="line">   id=<span class="string">'123'</span> ,</span><br><span class="line">   init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, ()=&gt;<span class="keyword">this</span>.doSomething(), <span class="literal">false</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   doSomething:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">"Handling "</span> + type + <span class="string">" for "</span> + <span class="keyword">this</span>.id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，箭头函数的声明方式也就决定了其简练性，使得代码直观，简单，值得去使用。</p><h5 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h5><ul><li>1.对箭头函数进行typeof操作会返回“function”。</li><li>2.箭头函数仍是Function的实例，故而instanceof的执行方式与传统函数一致。</li><li>3.call/apply/bind方法仍适用于箭头函数，但就算调用这些方法扩充当前作用域，this也依旧不会变化。<br>箭头函数与传统函数最大的不同之处在，禁用new操作。</li></ul><p>参考：<a href="http://www.jb51.net/article/50770.htm" target="_blank" rel="noopener">http://www.jb51.net/article/50770.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;箭头函数的特性：&quot;&gt;&lt;a href=&quot;#箭头函数的特性：&quot; class=&quot;headerlink&quot; title=&quot;箭头函数的特性：&quot;&gt;&lt;/a&gt;箭头函数的特性：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;对this的关联。箭头函数内置的this的值，取决于箭头函数在哪定义，而非箭头函数执行的上下文环境。&lt;/li&gt;
&lt;li&gt;new不可用。箭头函数内不能使用new关键字来实例化对象，否则报错。&lt;/li&gt;
&lt;li&gt;没有arguments对象。不能通过arguments对象访问传入参数，只能使用显式命名或其他ES6新特性来完成。&lt;/li&gt;
&lt;li&gt;this不可变。函数内置的this不可变，在函数体内整个执行环境中未常量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有这些这些差异的原因：对this的绑定是JavaScript错误的常见来源之一。容易丢失函数内置数值，或得出意外结果。其次，将箭头函数限制为使用固定this引用，有利于JavaScript引擎优化处理。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zhujm.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://zhujm.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>仿知乎日报的ReactNativ项目</title>
    <link href="http://zhujm.top/2017/08/15/201908151315/"/>
    <id>http://zhujm.top/2017/08/15/201908151315/</id>
    <published>2017-08-15T05:15:32.000Z</published>
    <updated>2019-08-16T01:39:05.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 个人从零到一学习开发的高仿知乎日报App，使用ReactNative技术，Js代码达到90%以上，采用Redux架构。</p></blockquote><a id="more"></a><p>有想了解及交流的童鞋可以戳进去看看，觉得还行可以给个star鼓励下哦。</p><ul><li>项目地址：<a href="https://github.com/zhujiaming/zhihudailyrn" target="_blank" rel="noopener">https://github.com/zhujiaming/zhihudailyrn</a></li><li>安卓演示apk下载：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1948083-49f8e358057b9f15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="apk"></p><ul><li>ReactNative：0.45.1</li><li>运行环境：<br>Android &gt;=4.1<br>IOS（即将适配）</li><li>运行效果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1948083-7e17aa7d10cb318a.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>项目仍在不断完善中，并且会在文章中分享coding过程中爬的坑以及学习到的知识，有任何问题或建议欢迎与我联系共同学习哈。<br>邮箱：<a href="mailto:ah_zjm@163.com" target="_blank" rel="noopener">ah_zjm@163.com</a><br>QQ：771407650</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 个人从零到一学习开发的高仿知乎日报App，使用ReactNative技术，Js代码达到90%以上，采用Redux架构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人项目" scheme="http://zhujm.top/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="android" scheme="http://zhujm.top/tags/android/"/>
    
      <category term="ReactNative" scheme="http://zhujm.top/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhujm.top/2015/07/01/hello-world/"/>
    <id>http://zhujm.top/2015/07/01/hello-world/</id>
    <published>2015-07-01T05:01:58.000Z</published>
    <updated>2019-08-15T05:11:20.540Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
