<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jiaming</title>
  
  <subtitle>这里什么都没有...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-15T02:40:29.017Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jiaming.zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AndriodStudio打开项目长时间无响应解决</title>
    <link href="http://yoursite.com/2019/08/15/201908151038/"/>
    <id>http://yoursite.com/2019/08/15/201908151038/</id>
    <published>2019-08-15T02:38:22.214Z</published>
    <updated>2019-08-15T02:40:29.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首次安装 AndroidStudio 后，基本都会经历一个漫长的 Gradle 构建工具下载过程，避免这个漫长的等待，那就只有手动下载。</p></blockquote><h6 id="手动下载-Gradle-构建工具并设置步骤："><a href="#手动下载-Gradle-构建工具并设置步骤：" class="headerlink" title="手动下载 Gradle 构建工具并设置步骤："></a>手动下载 Gradle 构建工具并设置步骤：</h6><a id="more"></a><ol><li><p>打开 项目目录/gradle/wrapper/gradle-wrapper.properties</p></li><li><p>查看 distributionUrl 的值的 gradle 版本号（如：gradle-2.4-all.zip），便获得了该项目所需 Gradle 构建工具版本</p></li><li><p><a href="https://pan.baidu.com/s/1pLEkm4F?utm_source=androiddevtools.cn&utm_medium=website#list/path=%2F" target="_blank" rel="noopener">点击这里</a>或<a href="services.gradle.org/distributions/">官方渠道</a><br>选择相应的版本下载，下载速度相比 as 肯定快不少</p></li><li><p>下载完成，打开 user 目录下的一个/.gradle 文件夹(windows 与 mac 相似，都是用户目录下，并且需要设置显示隐藏文件，具体百度即可，如果没有./gradle，运行一遍 AndroidStudio，跑个项目后 kill AndroidStudio 便有了)</p></li><li><p>找到/.gradle/wrapper/dist/ 目录下肯定会有 gradle-x.x-all 的文件夹，且对应项目所需的版本号（没有则把该项目导入 AndroidStudio，然后在 as 下载过程中强制结束 as，即可找到该文件夹）</p></li><li><p>把上面下载好的 jar 包丢进去，重新跑 AndroidStudio，这时，便正常啦。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首次安装 AndroidStudio 后，基本都会经历一个漫长的 Gradle 构建工具下载过程，避免这个漫长的等待，那就只有手动下载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;手动下载-Gradle-构建工具并设置步骤：&quot;&gt;&lt;a href=&quot;#手动下载-Gradle-构建工具并设置步骤：&quot; class=&quot;headerlink&quot; title=&quot;手动下载 Gradle 构建工具并设置步骤：&quot;&gt;&lt;/a&gt;手动下载 Gradle 构建工具并设置步骤：&lt;/h6&gt;
    
    </summary>
    
      <category term="devTools" scheme="http://yoursite.com/categories/devTools/"/>
    
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>简单破解一款安卓软件</title>
    <link href="http://yoursite.com/2019/08/15/201908151029/"/>
    <id>http://yoursite.com/2019/08/15/201908151029/</id>
    <published>2019-08-15T01:44:39.386Z</published>
    <updated>2019-08-15T02:57:42.404Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载apktool工具"><a href="#下载apktool工具" class="headerlink" title="下载apktool工具"></a>下载apktool工具</h5><p>从官方渠道下载→<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">官方下载</a></p><a id="more"></a><ul><li>简单的命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d test.apk</span><br><span class="line">I: Using Apktool 2.3.4 on test.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: 1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values */* XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br><span class="line">$ apktool b test</span><br><span class="line">I: Using Apktool 2.3.4 on test</span><br><span class="line">I: Checking whether sources has changed...</span><br><span class="line">I: Smaling smali folder into classes.dex...</span><br><span class="line">I: Checking whether resources has changed...</span><br><span class="line">I: Building resources...</span><br><span class="line">I: Building apk file...</span><br><span class="line">I: Copying unknown files/dir...</span><br></pre></td></tr></table></figure></li></ul><p>主要用到这两个命令。</p><h5 id="应用市场摘取一枚apk"><a href="#应用市场摘取一枚apk" class="headerlink" title="应用市场摘取一枚apk"></a>应用市场摘取一枚apk</h5><p>此处简单以youdaonote.apk为例</p><ul><li><p>执行完毕apktool d xxx.apk后，会在同级目录下生成一个文件夹<br><img src="https://upload-images.jianshu.io/upload_images/1948083-8923d61960b7e5e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译后"></p></li><li><p>在IntelliJ IDEA中打开<br><img src="https://upload-images.jianshu.io/upload_images/1948083-dc826fe2be61d84f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="in idea"></p></li><li><p>尝试破解-非vip可使用壁纸<br>（在该应用中，非vip是无法使用特定壁纸）<br><img src="https://upload-images.jianshu.io/upload_images/1948083-65afc3d243369282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="image.png"><br>此处需要了解简单的smali语法<br>参考：<a href="https://www.cnblogs.com/sevck/p/6844513.html" target="_blank" rel="noopener">https://www.cnblogs.com/sevck/p/6844513.html</a><br>之后就是可以全局查找，浏览等等手段，定位到关键代码位置，修改smali代码，再通过上面的命令来完成重新打包，再签名，即得一枚破解包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- apktool b test</span><br></pre></td></tr></table></figure></li></ul><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>这里只是简单的记录下破解手段，因为自家app也被破解了，必须得知己知彼。<br>破解软件不安全，用不得，此处仅供学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 反编译</span><br><span class="line">apktool d app-release.apk -o outdir </span><br><span class="line"></span><br><span class="line"># 回编译（生成的apk默认放在outdir/dist目录中）</span><br><span class="line">apktool b outdir</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;下载apktool工具&quot;&gt;&lt;a href=&quot;#下载apktool工具&quot; class=&quot;headerlink&quot; title=&quot;下载apktool工具&quot;&gt;&lt;/a&gt;下载apktool工具&lt;/h5&gt;&lt;p&gt;从官方渠道下载→&lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方下载&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>探究WebView getContentHeight的内部实现看看是否需要进行额外计算</title>
    <link href="http://yoursite.com/2019/08/15/201908150947/"/>
    <id>http://yoursite.com/2019/08/15/201908150947/</id>
    <published>2019-08-15T01:40:51.179Z</published>
    <updated>2019-08-15T02:37:54.759Z</updated>
    
    <content type="html"><![CDATA[<p>先从WebView入手</p><h6 id="WebView-java"><a href="#WebView-java" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the height of the HTML content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the height of the HTML content</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"webview"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    <span class="keyword">return</span> mProvider.getContentHeight();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再找mProvider的实现</p><a id="more"></a><h6 id="WebView-java-1"><a href="#WebView-java-1" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void ensureProviderCreated() &#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    if (mProvider == null) &#123;</span><br><span class="line">        // As this can get called during the base class constructor chain, pass the minimum</span><br><span class="line">        // number of dependencies here; the rest are deferred to init().</span><br><span class="line">        mProvider = getFactory().createWebView(this, new PrivateAccess());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getFactory()是关键</p><h6 id="WebView-java-2"><a href="#WebView-java-2" class="headerlink" title="WebView.java"></a>WebView.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static WebViewFactoryProvider getFactory() &#123;</span><br><span class="line">    return WebViewFactory.getProvider();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看WebViewFactory.getProvider(),直接看return</p><h6 id="WebViewFactory-java"><a href="#WebViewFactory-java" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static WebViewFactoryProvider getProvider() &#123;</span><br><span class="line">    //...</span><br><span class="line">    if (sProviderInstance != null) return sProviderInstance;</span><br><span class="line">    //...</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class="line">        Method staticFactory = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            staticFactory = providerClass.getMethod(</span><br><span class="line">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">               if (DEBUG) &#123;</span><br><span class="line">                Log.w(LOGTAG, &quot;error instantiating provider with static factory method&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">    //...</span><br><span class="line">     try &#123;</span><br><span class="line">        sProviderInstance = (WebViewFactoryProvider)</span><br><span class="line">                            staticFactory.invoke(null, new WebViewDelegate());</span><br><span class="line">        if (DEBUG) Log.v(LOGTAG, &quot;Loaded provider: &quot; + sProviderInstance);</span><br><span class="line">        return sProviderInstance;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">    </span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到了反射，关键的getProviderClass()，也是直接看return</p><h6 id="WebViewFactory-java-1"><a href="#WebViewFactory-java-1" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static Class&lt;WebViewFactoryProvider&gt; getProviderClass() &#123;</span><br><span class="line">        //...</span><br><span class="line">    try &#123;</span><br><span class="line">                return getWebViewProviderClass(clazzLoader);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_WEBVIEW);</span><br><span class="line">                &#125;</span><br><span class="line">        //...</span><br><span class="line">                </span><br><span class="line">     try &#123;</span><br><span class="line">                return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(NULL_WEBVIEW_FACTORY);</span><br><span class="line">            &#125; catch (ClassNotFoundException e2) &#123;</span><br><span class="line">                // Ignore.</span><br><span class="line">            &#125;</span><br><span class="line">       //...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个return可以不用关心，因为有null,关注第一个return</p><h6 id="WebViewFactory-java-2"><a href="#WebViewFactory-java-2" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @hide</span><br><span class="line"> */</span><br><span class="line">public static Class&lt;WebViewFactoryProvider&gt; getWebViewProviderClass(ClassLoader clazzLoader)</span><br><span class="line">        throws ClassNotFoundException &#123;</span><br><span class="line">    return (Class&lt;WebViewFactoryProvider&gt;) Class.forName(CHROMIUM_WEBVIEW_FACTORY,</span><br><span class="line">            true, clazzLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隐藏方法，看看CHROMIUM_WEBVIEW_FACTORY是什么东东</p><h6 id="WebViewFactory-java-3"><a href="#WebViewFactory-java-3" class="headerlink" title="WebViewFactory.java"></a>WebViewFactory.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/** @hide */</span><br><span class="line">private static final String CHROMIUM_WEBVIEW_FACTORY =</span><br><span class="line">        &quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForO&quot;;</span><br></pre></td></tr></table></figure><p>OK,反射了这个类，去sdk source里找找</p><p>…<br>找啊找<br>…<br>发现在android-19,android-20,android-22里找到，高版本的都是null实现</p><p>随便找个android-22吧，路径如下：</p><blockquote><p>android-sdk\sources\android-22\com\android\webview\chromium\WebViewChromiumFactoryProvider.java</p></blockquote><p>回到上面<br>getProviderClass()完毕，反射出WebViewChromiumFactoryProvider实例，就可以执行其createWebView()方法了</p><h6 id="WebViewChromiumFactoryProvider-java"><a href="#WebViewChromiumFactoryProvider-java" class="headerlink" title="WebViewChromiumFactoryProvider.java"></a>WebViewChromiumFactoryProvider.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">public WebViewProvider createWebView(WebView webView, WebView.PrivateAccess privateAccess) &#123;</span><br><span class="line">    WebViewChromium wvc = new WebViewChromium(this, webView, privateAccess);</span><br><span class="line"></span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        if (mWebViewsToStart != null) &#123;</span><br><span class="line">            mWebViewsToStart.add(new WeakReference&lt;WebViewChromium&gt;(wvc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return wvc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK 真正的实现找到了—&gt;WebViewChromium.java，并且在同目录下</p><p>至此，WebView的傀儡 WebViewProvider mProvider已揭开真面目</p><p>下一步肯定是不忘初心，看看getContentHeight()的实现啦</p><h6 id="WebViewChromiumFactoryProvider-java-1"><a href="#WebViewChromiumFactoryProvider-java-1" class="headerlink" title="WebViewChromiumFactoryProvider.java"></a>WebViewChromiumFactoryProvider.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int getContentHeight() &#123;</span><br><span class="line">    if (mAwContents == null) return 0;</span><br><span class="line">    // No checkThread() as it is mostly thread safe (workaround for b/10594869).</span><br><span class="line">    return mAwContents.getContentHeightCss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是桥接其他类来实现，AwContents.java，在 org.chromium.android_webview.AwContents;</p><blockquote><p>AwContents提供的不是WebView的API，所以，需要一层桥接部分，将AwContents桥接到WebView，这就是图中的桥接模块，该模块位于Android源代码中的frameworks/webview/chromium/java/com/android/webview/chromium/目录下，WebViewChromium和WebViewChromiumFactory类作为WebView的具体实现，依赖于Chromium项目的AwContents模块。</p></blockquote><p>github clone 一个Chromium项目看看<br><a href="https://android.googlesource.com/platform/external/chromium_org" target="_blank" rel="noopener">https://android.googlesource.com/platform/external/chromium_org</a></p><p>找啊找<br>在\chromium_org\android_webview\java\src\org\chromium\android_webview目录下找到AwContents.java</p><p>ok 查看其内部实现即可</p><h6 id="AwContents-java"><a href="#AwContents-java" class="headerlink" title="AwContents.java"></a>AwContents.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int getContentHeightCss() &#123;</span><br><span class="line">    return (int) Math.ceil(mContentHeightDip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出直接返回成员变量，未进行计算</p><p>那这个成员变量赋值在哪</p><h6 id="AwContents-java-1"><a href="#AwContents-java-1" class="headerlink" title="AwContents.java"></a>AwContents.java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@CalledByNative</span><br><span class="line">private void updateScrollState(int maxContainerViewScrollOffsetX,</span><br><span class="line">        int maxContainerViewScrollOffsetY, int contentWidthDip, int contentHeightDip,</span><br><span class="line">        float pageScaleFactor, float minPageScaleFactor, float maxPageScaleFactor) &#123;</span><br><span class="line">    mContentWidthDip = contentWidthDip;</span><br><span class="line">    mContentHeightDip = contentHeightDip;</span><br><span class="line">    mScrollOffsetManager.setMaxScrollOffset(maxContainerViewScrollOffsetX,</span><br><span class="line">            maxContainerViewScrollOffsetY);</span><br><span class="line">    setPageScaleFactorAndLimits(pageScaleFactor, minPageScaleFactor, maxPageScaleFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里赋值，可以根据注解@CalledByNative看出是Native层主动回调出来进行设置。</p><p>（也可在该实现中查看其它webview操作的实现。）</p><p>所以得到了想要的答案。</p><blockquote><p>参考：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1921.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1921.html</a></p><p><a href="https://android.googlesource.com/platform/external/chromium_org" target="_blank" rel="noopener">https://android.googlesource.com/platform/external/chromium_org</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从WebView入手&lt;/p&gt;
&lt;h6 id=&quot;WebView-java&quot;&gt;&lt;a href=&quot;#WebView-java&quot; class=&quot;headerlink&quot; title=&quot;WebView.java&quot;&gt;&lt;/a&gt;WebView.java&lt;/h6&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Gets the height of the HTML content.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the height of the HTML content&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ViewDebug&lt;/span&gt;.ExportedProperty(category = &lt;span class=&quot;string&quot;&gt;&quot;webview&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getContentHeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mProvider.getContentHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;再找mProvider的实现&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="webview" scheme="http://yoursite.com/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/12/hello-world/"/>
    <id>http://yoursite.com/2019/08/12/hello-world/</id>
    <published>2019-08-12T06:39:41.185Z</published>
    <updated>2019-08-15T02:41:10.539Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
